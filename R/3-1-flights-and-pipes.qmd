---
title: "Flights and pipes"
editor_options: 
  chunk_output_type: console
---

# Introduction

Have you ever had a flight delayed? How common is that? Which airlines are delayed more than others?

## Packages

We will use the **tidyverse** packages for data wrangling and visualization and the **nycflights13** package for the data.

```{r}
#| label: load-packages
#| message: false
library(tidyverse)
library(nycflights13)
```

## Data

The dataset we will explore is called `flights`. Let's `glimpse()` at it.

```{r}
#| label: glimpse-flights
glimpse(flights)
```

# Exploring flights

## Exercise 1

Fill in the blanks:

The `flights` data frame has `r nrow(flights)` rows. Each row represents a flight out of 3 airports.

## Exercise 2

What are the names of the variables in `flights`.

```{r}
#| label: column-names
names(flights)
```

## Exercise 3 - `select()`

-   Make a data frame that only contains the variables `dep_delay` and `arr_delay`.

```{r}
#| label: select-vars
flights |>
  select(dep_delay, arr_delay)
```

-   Make a data frame that keeps every variable except `dep_delay`.

```{r}
#| label: exclude-vars
flights |>
  select(!dep_delay)
```

-   Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.

```{r}
#| label: include-range
flights |>
  select(year:dep_delay)
```

-   Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `"arr_"` in the name.

```{r}
#| label: arr-vars
flights |>
  select(contains("arr_"))
```

## Exercise 4 - `slice()`

-   Display the first five rows of the `flights` data frame.

```{r}
#| label: slice
flights |>
  slice(1:5)
```

-   Display the last two rows of the `flights` data frame.

```{r}
#| label: last-two
flights |>
  slice_tail(n=2)
```

## Exercise 5 - `arrange()`

-   Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.

```{r}
#| label: arrange-delays
flights |>
  arrange(dep_delay)
```

-   What does it mean for the `dep_delay` to have a negative value?

Add your response here.

-   Arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.

```{r}
#| label: arrange-delays-desc
flights |>
  arrange(desc(dep_delay)) |>
  slice_head(n = 1) |>
  select(tailnum, carrier, dep_delay)
```

-   Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?

```{r}
#| label: longest-delay
flights |>
  filter(dest)
```

## Exercise 6 - `filter()`

-   Filter for all rows where the destination airport is RDU.

```{r}
#| label: rdu
flights |>
  filter(dest=="RDU")
```

-   Filter for all rows where the destination airport is RDU and the arrival delay is less than 0.

```{r}
#| label: rdu-ontime
flights |>
  filter(dest=="RDU" & arr_delay<0)
```

-   Describe what the code is doing in words.

Add response here.

```{r}
#| label: nc-early
flights |>
  filter(
    dest %in% c("RDU", "GSO"),
    arr_delay < 0 | dep_delay < 0
  )
```

**Hint:** Logical operators in R:

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `<`           | is less than?                                            |
| `<=`          | is less than or equal to?                                |
| `>`           | is greater than?                                         |
| `>=`          | is greater than or equal to?                             |
| `==`          | is exactly equal to?                                     |
| `!=`          | is not equal to?                                         |
| `x & y`       | is x AND y?                                              |
| `x | y`       | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |

## Exercise 7 - `count()`

-   Create a frequency table of the destination locations for flights from New York.

```{r}
#| label: count-dest
flights |>
  count(dest, sort = TRUE)
```

-   In which month was there the fewest number of flights? How many flights were there in that month?

```{r}
#| label: count-month
flights |>
  count(month, sort = TRUE) |>
  slice_tail(n=1)
```

-   On which date (month + day) was there the largest number of flights? How many flights were there on that day?

```{r}
#| label: count-date
flights |>
  count(month, day, sort = TRUE) |>
  slice_head(n=1)
```

## Exercise 8 - `mutate()`

-   Convert `air_time` (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight.

```{r}
#| label: calculate-mph
flights |>
  mutate(airtime_hr = air_time/60) |>
  mutate(mph = distance/airtime_hr) |>
  relocate(airtime_hr, air_time, mph)
```

-   First, count the number of flights each month, and then calculate the proportion of flights in each month. What proportion of flights take place in July?

```{r}
#| label: months-prop
flights |>
  count(month) |>
  mutate(proportion_month = 100* n/nrow(flights)) |>
  filter(month==7)
```

## Exercise 9 - `summarize()`

-   Find mean arrival delay for all flights.

```{r}
#| label: find-arrival-delay
flights |>
  summarize(mean_arrdelay = mean(arr_delay, na.rm = TRUE))
```

## Exercise 10 - `group_by()`

-   Find mean arrival delay for for each month.

```{r}
#| label: mean-arr-delay-month
flights |>
  group_by(month) |>
  summarize(mean_arrdelay = mean(arr_delay, na.rm = TRUE))
```

-   What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?

```{r}
#| label: median-dep-dely-origin
flights |>
  group_by(origin) |>
  summarize(median_dep_delay = median(dep_delay, na.rm = TRUE)) |>
  arrange(median_dep_delay) |>
  slice_head(n=1)
```
